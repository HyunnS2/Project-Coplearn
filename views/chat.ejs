<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />

    <link rel="stylesheet" href="/css/chat.css" />

    <script src="/socket.io/socket.io.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <title>Koflearn</title>
    <style></style>
  </head>
  <body>
    <div class="all-container">
      <div class="header-container">
        <div id="title"></div>
        <div class="title-content">
          <img
            src="/user.png"
            data-bs-toggle="modal"
            data-bs-target="#exampleModal"
            id="image_button"
          />
          <div id="user_num">4</div>
        </div>
      </div>
      <div
        class="modal fade"
        id="exampleModal"
        tabindex="-1"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              참여한 사용자
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <ul id="userList"></ul>
            </div>
          </div>
        </div>
      </div>

      <div class="chat-container">
        <div id="chat-messages">
          <div class="d">
            <div class="name">안녕</div>
            <div class="other-chat">ㅋㅋ</div>
          </div>
          <div class="d">
            <div class="name">안녕</div>
            <div class="other-chat">ㅋㅋ</div>
          </div>
          <div class="d">
            <div class="name">안녕</div>
            <div class="other-chat">asdassssssssssssssssssㅋㅋ</div>
          </div>
        </div>
      </div>
      <div class="input-container">
        <form id="chatForm">
          <input type="text" id="message" placeholder="메세지 입력" />
          <button id="send_button">전송</button>
        </form>
      </div>
    </div>
    <script>
      const roomId = window.location.pathname.split("/").pop();
      let nick_name;
      let user_id;

      const socket = io();

      socket.on("connection", async () => {
        console.log("WebSocket 연결 성공");
      });

      socket.on("disconnect", () => {
        console.log("WebSocket 연결이 해제되었습니다.");
      });

      const chatForm = document.querySelector("#chatForm");

      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const messageInput = document.querySelector("#message");
        const message = messageInput.value;
        const token = getCookie("jwt");
        if (message) {
          const send_at = new Date().toISOString(); // ISO 형식으로 변환

          socket.emit("sendMessage", roomId, token, message, send_at);
        }

        messageInput.value = "";
      });

      function getCookie(name) {
        const cookies = document.cookie.split(";");
        for (const cookie of cookies) {
          const [cookieName, cookieValue] = cookie.trim().split("=");
          if (cookieName === name) {
            return cookieValue;
          }
        }
        return null;
      }

      function loadPreviousMessages(roomId) {
        socket.emit("load previous messages", roomId);
      }
      socket.on("previous messages", (messages) => {
        if (messages && messages.length > 0) {
          displayPreviousMessages(messages);
        } else {
          console.log("이전 메시지가 없습니다.");
        }
      });

      socket.on("chat message", (message) => {
        const chatMessages = document.querySelector("#chat-messages");

        const formattedTime = new Date(message.send_at).toLocaleTimeString();
        const messageContainer = document.createElement("div");
        messageContainer.classList.add("d");

        const messageItem = document.createElement("div");
        const messageClass =
          message.nick_name === nick_name ? "my-chat" : "other-chat";
        messageItem.classList.add(messageClass);

        if (messageClass === "other-chat") {
          messageItem.textContent = `${message.content}`;
          // 이름 표시를 위한 엘리먼트 생성
          const nameElement = document.createElement("div");
          nameElement.classList.add("name");
          nameElement.textContent = message.nick_name;

          messageContainer.appendChild(nameElement); // 이름 엘리먼트 추가
        } else {
          messageItem.textContent = `${message.content}`;
        }

        // 시간 정보를 data-time 속성에 추가
        messageItem.setAttribute("data-time", formattedTime);

        messageContainer.appendChild(messageItem);
        chatMessages.appendChild(messageContainer);

        chatMessages.scrollTop = chatMessages.scrollHeight;
      });

      function displayPreviousMessages(messages) {
        const chatMessages = document.querySelector("#chat-messages");

        messages.forEach((message) => {
          const formattedTime = new Date(message.send_at).toLocaleTimeString();
          const messageContainer = document.createElement("div");
          messageContainer.classList.add("d");

          const messageItem = document.createElement("div");
          const messageClass =
            message.nick_name === nick_name ? "my-chat" : "other-chat";
          messageItem.classList.add(messageClass);

          if (messageClass === "other-chat") {
            messageItem.textContent = `${message.content}`;

            // 이름 표시를 위한 엘리먼트 생성
            const nameElement = document.createElement("div");
            nameElement.classList.add("name");
            nameElement.textContent = message.nick_name;

            messageContainer.appendChild(nameElement); // 이름 엘리먼트 추가
          } else {
            messageItem.textContent = `${message.content}`;
          }
          // 시간 정보를 data-time 속성에 추가
          messageItem.setAttribute("data-time", formattedTime);

          messageContainer.appendChild(messageItem);
          chatMessages.appendChild(messageContainer);
          chatMessages.scrollTop = chatMessages.scrollHeight;
        });
      }

      document.addEventListener("DOMContentLoaded", async function () {
        try {
          const roomId = window.location.pathname.split("/").pop();
          if (roomId) {
            console.log("roomId:", roomId);
            const response = await axios.get(`/api/chat/${roomId}`);
            const data = response.data;
            const roomName = data.roomName;
            const titleElement = document.querySelector("#title");
            titleElement.textContent = roomName;
            nick_name = data.nick_name;

            const userNumElement = document.querySelector("#user_num");
            userNumElement.textContent = data.userList.length;

            console.log("userList:", data.userList.length);

            joinChatRoom(roomId);
            loadPreviousMessages(roomId);

            const myModal = document.getElementById("exampleModal");

            myModal.addEventListener("shown.bs.modal", () => {
              updateUserList(data.userList, nick_name);
            });
          } else {
            console.log("roomId가 없습니다.");
          }
        } catch (error) {
          console.error("오류 발생:", error);
        }
      });

      function joinChatRoom(roomId) {
        socket.emit("join room", roomId);
      }
      function updateUserList(userList, userNickname) {
        const userListContainer = document.querySelector("#userList");
        userListContainer.innerHTML = "";

        userList.forEach((user) => {
          const listItem = document.createElement("li");

          if (user === userNickname) {
            // 현재 사용자인 경우 "(나)"를 추가
            listItem.textContent = user + " (나)";
          } else {
            listItem.textContent = user;
          }

          userListContainer.appendChild(listItem);
        });
      }
    </script>
  </body>
</html>
